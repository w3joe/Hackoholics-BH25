# Hackoholics-BH25: OCRManager

This repository contains an optimized OCR (Optical Character Recognition) pipeline built for the **TIL-AI 2025 OCR Challenge**. It is designed to extract clean text from document-like images with a strong focus on **accuracy** while balancing **runtime performance**.

---

## 🧠 What This Does

The project centers around the `OCRManager` class — a lightweight Python wrapper around Tesseract OCR, with efficient image preprocessing using:

- 🧠 **Tesseract OCR** (via PyTesseract) for text recognition  
- 🖼 **OpenCV** and **Pillow** for image loading and transformation  
- ⚙️ Optional thresholding (disabled by default for better performance)  
- ⏱ Timeout-based OCR calls for robust inference under time constraints  

---

## 🔧 What I Changed / Explored

### ✅ Final Configuration (Best Balance)

- **Binarization disabled**  
  - Initially added Otsu thresholding, but this hurt both **accuracy** and **speed**. Disabling it worked best for clean document text.

- **Capped image resolution (max dimension = 960px)**  
  - Upscaled images gave higher accuracy but increased runtime.
  - After tuning, I found that resizing large images down to 960px on the longest edge yielded the best trade-off.

- **Single-threaded inference (no batch)**  
  - Due to server constraints and simplicity, I focused on optimizing single-image inference speed.

---

### 🧪 Experiment: PaddleOCR ONNX

I also tested [OnnxOCR by jingsongliujing](https://github.com/jingsongliujing/OnnxOCR), which uses PaddleOCR converted to ONNX format:

- ✅ Accuracy: **0.98** (slightly better than Tesseract)
- ❌ Speed: **0.30** (significantly slower than Tesseract setup)

Despite better results, I could not parallelize or speed up ONNX inference enough to justify switching in the current setup.

---

## 📊 Final Scores on TIL-AI Eval Server

| Engine         | Accuracy | Speed |
|----------------|----------|-------|
| Tesseract OCR  | **0.94** | **0.73** |
| PaddleOCR ONNX | **0.98** | **0.30** |

The current repo uses the Tesseract-based implementation for its excellent balance of performance and quality.

---

## 🧾 Usage Example

```python
from ocr_manager import OCRManager

ocr = OCRManager(binarize=False)

# Read a document image and run OCR
with open("sample.jpg", "rb") as f:
    result = ocr.ocr(f.read())

print(result)

